---
prefer-html: true
---

# Advanced Data Visualization

## Introduction

Building on the visualization techniques covered in Chapter 6, this chapter explores advanced data visualization methods that can help you communicate complex ecological data more effectively. We'll focus on creating publication-quality graphics, interactive visualizations, and specialized plots for ecological data.

## Creating Publication-Quality Graphics

### Customizing ggplot2 Themes

The ggplot2 package allows extensive customization of plot appearance:

```{r}
library(ggplot2)
library(dplyr)

# Load data
data(iris)

# Create a basic scatter plot
base_plot <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "Relationship between Sepal Length and Petal Length",
       subtitle = "Iris Dataset",
       x = "Sepal Length (cm)",
       y = "Petal Length (cm)",
       caption = "Source: Anderson's Iris dataset")

# Display the base plot
base_plot

# Create a customized theme
custom_theme <- theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "gray80", fill = NA)
  )

# Apply the custom theme
base_plot + custom_theme
```

### Color Palettes for Ecological Data

Choosing appropriate color palettes is crucial for effective visualization:

```{r}
# Load packages for color palettes
library(RColorBrewer)
library(viridis)

# Display color palettes suitable for ecological data
par(mfrow = c(4, 1), mar = c(2, 6, 2, 1))
display.brewer.pal(8, "YlGn")
display.brewer.pal(8, "BrBG")
display.brewer.pal(11, "RdYlBu")
scales::show_col(viridis(8))

# Apply different color palettes to our plot
plot1 <- base_plot + 
  scale_color_brewer(palette = "Set1") +
  custom_theme +
  ggtitle("Color Brewer 'Set1' Palette")

plot2 <- base_plot + 
  scale_color_viridis_d() +
  custom_theme +
  ggtitle("Viridis Discrete Palette")

# Display the plots
plot1
plot2
```

### Arranging Multiple Plots

Combining multiple plots can help compare different aspects of your data:

```{r}
library(patchwork)

# Create individual plots
p1 <- ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
  geom_boxplot() +
  labs(title = "Sepal Length by Species",
       x = NULL,
       y = "Sepal Length (cm)") +
  theme_minimal() +
  theme(legend.position = "none")

p2 <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
  geom_boxplot() +
  labs(title = "Petal Length by Species",
       x = NULL,
       y = "Petal Length (cm)") +
  theme_minimal() +
  theme(legend.position = "none")

p3 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
  geom_density(alpha = 0.7) +
  labs(title = "Sepal Length Distribution",
       x = "Sepal Length (cm)",
       y = "Density") +
  theme_minimal()

p4 <- ggplot(iris, aes(x = Petal.Length, fill = Species)) +
  geom_density(alpha = 0.7) +
  labs(title = "Petal Length Distribution",
       x = "Petal Length (cm)",
       y = "Density") +
  theme_minimal()

# Arrange the plots
(p1 + p2) / (p3 + p4) + 
  plot_annotation(
    title = "Iris Morphology by Species",
    caption = "Source: Anderson's Iris dataset"
  )
```

## Interactive Visualizations

### Creating Interactive Plots with plotly

Interactive plots allow users to explore data more deeply:

```{r interactive-plotly, fig.width=8, fig.height=6, fig.cap="Relationship between Sepal Length and Petal Length across different Iris species. In the HTML version, this plot is interactive and allows zooming, panning, and hovering for details."}
library(plotly)
library(knitr)

# Create a ggplot visualization
p <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "Relationship between Sepal Length and Petal Length",
       x = "Sepal Length (cm)",
       y = "Petal Length (cm)") +
  theme_minimal() +
  scale_color_viridis_d()

# Check if we're in HTML output mode
if (knitr::is_html_output()) {
  # For HTML output, use the interactive plotly version
  ggplotly(p)
} else {
  # For PDF output, use the static ggplot version
  p + annotate("text", x = 6, y = 6, 
               label = "Note: Interactive version available in HTML output", 
               fontface = "italic", size = 3)
}
```

### Interactive Maps with leaflet

For spatial ecological data, interactive maps can be particularly useful:

```{r interactive-map, fig.width=8, fig.height=6, fig.cap="Ecological study sites across different habitat types. In the HTML version, this map is interactive and allows zooming, panning, and clicking on markers for details."}
library(leaflet)
library(ggplot2)
library(knitr)

# Create sample ecological site data
sites <- data.frame(
  name = c("Forest Reserve", "Wetland Study Area", "Grassland Transect", 
           "Mountain Research Station", "Coastal Monitoring Site"),
  lat = c(37.7749, 37.8, 37.75, 37.85, 37.7),
  lng = c(-122.4194, -122.45, -122.5, -122.4, -122.3),
  habitat = c("Forest", "Wetland", "Grassland", "Alpine", "Coastal"),
  species_count = c(120, 85, 65, 95, 110)
)

# Create a color palette based on habitat type
habitat_colors <- c("darkgreen", "blue", "gold", "purple", "lightblue")
names(habitat_colors) <- c("Forest", "Wetland", "Grassland", "Alpine", "Coastal")

if (knitr::is_html_output()) {
  # For HTML output, create an interactive leaflet map
  habitat_pal <- colorFactor(
    palette = habitat_colors,
    domain = sites$habitat
  )
  
  # Create an interactive map
  leaflet(sites) %>%
    addTiles() %>%  # Add default OpenStreetMap tiles
    addCircleMarkers(
      ~lng, ~lat,
      color = ~habitat_pal(habitat),
      radius = ~sqrt(species_count) * 1.5,
      popup = ~paste("<b>", name, "</b><br>",
                     "Habitat: ", habitat, "<br>",
                     "Species Count: ", species_count),
      label = ~name,
      fillOpacity = 0.7
    ) %>%
    addLegend(
      position = "bottomright",
      pal = habitat_pal,
      values = ~habitat,
      title = "Habitat Type",
      opacity = 0.7
    )
} else {
  # For PDF output, create a static ggplot map
  world <- map_data("world")
  
  ggplot() +
    geom_polygon(data = world, aes(x = long, y = lat, group = group), 
                 fill = "lightgray", color = "darkgray", size = 0.2) +
    geom_point(data = sites, aes(x = lng, y = lat, color = habitat, size = species_count),
               alpha = 0.7) +
    scale_color_manual(values = habitat_colors) +
    scale_size_continuous(range = c(3, 8), name = "Species Count") +
    coord_fixed(xlim = c(-123, -122), ylim = c(37.6, 37.9)) +
    labs(title = "Ecological Study Sites",
         subtitle = "Note: Interactive version available in HTML output",
         x = "Longitude", y = "Latitude", color = "Habitat Type") +
    theme_minimal() +
    theme(legend.position = "right")
}
```

## Specialized Ecological Visualizations

### Ordination Plots

Ordination techniques like PCA and NMDS are common in ecological studies:

```{r}
# Perform PCA on iris dataset
pca_result <- prcomp(iris[, 1:4], scale. = TRUE)
pca_data <- as.data.frame(pca_result$x)
pca_data$Species <- iris$Species

# Create a PCA biplot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Species)) +
  geom_point(size = 3, alpha = 0.7) +
  stat_ellipse(level = 0.95) +
  labs(title = "PCA of Iris Dataset",
       x = paste0("PC1 (", round(summary(pca_result)$importance[2, 1] * 100, 1), "%)"),
       y = paste0("PC2 (", round(summary(pca_result)$importance[2, 2] * 100, 1), "%)")) +
  theme_minimal()

# Create a loadings plot
loadings <- as.data.frame(pca_result$rotation)
loadings$variable <- rownames(loadings)

ggplot(loadings, aes(x = PC1, y = PC2)) +
  geom_segment(aes(x = 0, y = 0, xend = PC1 * 5, yend = PC2 * 5),
               arrow = arrow(length = unit(0.2, "cm")), color = "gray50") +
  geom_text(aes(label = variable), nudge_x = sign(loadings$PC1) * 0.05,
            nudge_y = sign(loadings$PC2) * 0.05) +
  labs(title = "PCA Loadings",
       x = "PC1",
       y = "PC2") +
  theme_minimal() +
  xlim(-0.7, 0.7) +
  ylim(-0.7, 0.7)
```

### Heatmaps for Community Data

Heatmaps are useful for visualizing species-by-site matrices:

```{r}
# Create a simulated species-by-site matrix
set.seed(123)
n_sites <- 10
n_species <- 15
community_matrix <- matrix(rpois(n_sites * n_species, lambda = 2), 
                          nrow = n_sites, ncol = n_species)
rownames(community_matrix) <- paste0("Site", 1:n_sites)
colnames(community_matrix) <- paste0("Sp", 1:n_species)

# Convert to long format for ggplot
community_data <- as.data.frame(as.table(community_matrix))
names(community_data) <- c("Site", "Species", "Abundance")

# Create a heatmap
ggplot(community_data, aes(x = Species, y = Site, fill = Abundance)) +
  geom_tile() +
  scale_fill_viridis_c() +
  labs(title = "Species Abundance by Site",
       x = "Species",
       y = "Site",
       fill = "Abundance") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Network Diagrams for Ecological Interactions

Network diagrams can visualize species interactions:

```{r}
library(igraph)
library(ggraph)

# Create a simulated interaction network
set.seed(456)
n_species <- 10
interaction_matrix <- matrix(rbinom(n_species^2, 1, 0.2), 
                            nrow = n_species, ncol = n_species)
diag(interaction_matrix) <- 0  # No self-interactions
species_names <- paste0("Species", 1:n_species)
rownames(interaction_matrix) <- species_names
colnames(interaction_matrix) <- species_names

# Convert to igraph object
g <- graph_from_adjacency_matrix(interaction_matrix, mode = "directed")
V(g)$type <- sample(c("Plant", "Pollinator", "Herbivore"), n_species, replace = TRUE)

# Create a network diagram
ggraph(g, layout = "fr") +
  geom_edge_link(arrow = arrow(length = unit(2, "mm")), 
                end_cap = circle(2, "mm"),
                color = "gray50") +
  geom_node_point(aes(color = type), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE) +
  scale_color_brewer(palette = "Set1") +
  labs(title = "Ecological Interaction Network",
       color = "Species Type") +
  theme_void()
```

## Visualizing Spatial Data

### Creating Maps with ggplot2

Spatial visualization is crucial for ecological data:

```{r spatial-map, fig.width=8, fig.height=6, fig.cap="Distribution of sample species occurrences across Europe. The map shows the spatial patterns of three different species."}
library(ggplot2)
library(maps)
library(knitr)

# Get world map data
world <- map_data("world")

# Create sample species occurrence data
set.seed(789)
n_points <- 100
occurrences <- data.frame(
  species = sample(c("Species A", "Species B", "Species C"), n_points, replace = TRUE),
  longitude = runif(n_points, -10, 40),
  latitude = runif(n_points, 35, 60)
)

# Create a map
ggplot() +
  geom_polygon(data = world, aes(x = long, y = lat, group = group), 
               fill = "white", color = "gray70", size = 0.2) +
  geom_point(data = occurrences, 
             aes(x = longitude, y = latitude, color = species),
             alpha = 0.7, size = 2) +
  coord_fixed(xlim = c(-10, 40), ylim = c(35, 60)) +
  scale_color_viridis_d(option = "plasma", end = 0.8) +
  labs(title = "Species Distribution Map",
       subtitle = "Sample occurrences across Europe",
       x = "Longitude", y = "Latitude", color = "Species") +
  theme_minimal() +
  theme(panel.grid.major = element_line(color = "gray90", size = 0.2))
```

### Visualizing Raster Data

Environmental raster data is common in ecological studies:

```{r raster-map, fig.width=8, fig.height=6, fig.cap="Environmental variable visualization across Europe. The raster data shows a simulated environmental gradient overlaid with country boundaries."}
library(raster)
library(ggplot2)
library(viridis)
library(maps)

# Create a sample raster
r <- raster(ncol = 100, nrow = 100)
extent(r) <- c(-10, 40, 35, 60)  # Same extent as our map
values(r) <- runif(ncell(r)) * 10  # Random values

# Convert to data frame for ggplot
r_df <- as.data.frame(r, xy = TRUE)
colnames(r_df) <- c("longitude", "latitude", "value")

# Get world map data
world <- map_data("world")

# Create a raster map
ggplot() +
  geom_raster(data = r_df, aes(x = longitude, y = latitude, fill = value)) +
  geom_polygon(data = world, aes(x = long, y = lat, group = group), 
               fill = NA, color = "gray30", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Value") +
  coord_fixed(xlim = c(-10, 40), ylim = c(35, 60)) +
  labs(title = "Environmental Variable Distribution",
       subtitle = "Simulated environmental gradient across Europe",
       x = "Longitude", y = "Latitude") +
  theme_minimal() +
  theme(panel.grid = element_blank())
```

## Advanced Visualization in Jamovi

While Jamovi has more limited visualization capabilities compared to R, it offers:

1. **Customization Options**: Adjust colors, labels, and themes
2. **Export Features**: Save high-resolution images for publications
3. **Interactive Elements**: Zoom and pan functionality in some plots

## Summary

In this chapter, we've explored advanced data visualization techniques for ecological research:

- Creating publication-quality graphics with customized themes and color palettes
- Arranging multiple plots for comprehensive data presentation
- Building interactive visualizations for data exploration
- Developing specialized plots for ecological data (ordination, heatmaps, networks)
- Visualizing spatial data with maps

These advanced visualization techniques allow you to communicate complex ecological patterns and relationships more effectively, enhancing both data exploration and the presentation of research findings.

## Exercises

1. Create a publication-quality figure with multiple panels using the patchwork package.
2. Design a custom theme for ggplot2 that matches the style guidelines of a scientific journal.
3. Convert a static ggplot2 visualization to an interactive plotly plot.
4. Create a heatmap to visualize a species-by-site abundance matrix.
5. Visualize a PCA or NMDS ordination of an ecological dataset.
6. Create a map showing the distribution of species or environmental variables.
