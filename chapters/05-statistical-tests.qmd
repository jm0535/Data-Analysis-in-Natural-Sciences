---
prefer-html: true
---

# Common Statistical Tests

```{r setup, include=FALSE}
# Load required packages for data analysis and visualization
library(tidyverse)
library(ggplot2)
library(knitr)
library(kableExtra)
library(magrittr)  # For the pipe operator %>%
library(reshape2)  # For data reshaping functions

# Set global knitr options
knitr::opts_chunk$set(
  echo = TRUE,        # Display code chunks
  warning = FALSE,    # Suppress warnings
  message = FALSE,    # Suppress messages
  fig.width = 8,      # Default figure width
  fig.height = 5,     # Default figure height
  fig.align = "center" # Center figures
)
```

## Introduction

This chapter explores common statistical tests used in natural sciences research. Building on the hypothesis testing framework introduced in the previous chapter, we'll examine specific tests for different research scenarios and data types.

## Choosing the Right Statistical Test

Selecting the appropriate statistical test depends on several factors:

1. **Research Question**: What you're trying to determine
2. **Data Type**: Categorical, continuous, or ordinal
3. **Number of Groups**: One, two, or multiple groups
4. **Data Distribution**: Normal or non-normal
5. **Independence**: Whether observations are independent or related

### Decision Tree for Common Tests

```{r}
#| echo: false
#| fig-cap: "Decision tree for selecting appropriate statistical tests"
#| eval: false

# This code requires the DiagrammeR package
# If you want to run this code, first install the package with:
# install.packages("DiagrammeR")

library(DiagrammeR)

grViz("
digraph test_selection {
  # Node definitions
  node [shape = rectangle, fontname = 'Arial', fontsize = 10, style = filled, fillcolor = lightblue]
  
  start [label = 'Research Question', fillcolor = lightgreen]
  
  # First level: Number of variables
  one_var [label = 'One Variable']
  two_var [label = 'Two Variables']
  multi_var [label = 'Multiple Variables']
  
  # Second level for one variable
  one_sample [label = 'One Sample']
  two_sample [label = 'Two Samples']
  multi_sample [label = 'Multiple Samples']
  
  # Tests for one variable
  t_test [label = 'One-Sample t-Test\\n(Normal, Continuous)']
  wilcox [label = 'Wilcoxon Signed-Rank\\n(Non-normal, Continuous)']
  binom [label = 'Binomial Test\\n(Categorical)']
  
  # Tests for two variables - two samples
  ind_t [label = 'Independent t-Test\\n(Normal, Continuous)']
  paired_t [label = 'Paired t-Test\\n(Normal, Continuous, Related)']
  mann [label = 'Mann-Whitney U\\n(Non-normal, Continuous)']
  wilcox_paired [label = 'Wilcoxon Signed-Rank\\n(Non-normal, Continuous, Related)']
  chi_sq [label = 'Chi-Square Test\\n(Categorical)']
  mcnemar [label = 'McNemar Test\\n(Categorical, Related)']
  
  # Tests for multiple samples
  anova [label = 'ANOVA\\n(Normal, Continuous)']
  rm_anova [label = 'Repeated Measures ANOVA\\n(Normal, Continuous, Related)']
  kruskal [label = 'Kruskal-Wallis\\n(Non-normal, Continuous)']
  friedman [label = 'Friedman Test\\n(Non-normal, Continuous, Related)']
  chi_sq_multi [label = 'Chi-Square Test\\n(Categorical)']
  
  # Tests for relationships
  pearson [label = 'Pearson Correlation\\n(Normal, Continuous)']
  spearman [label = 'Spearman Correlation\\n(Non-normal or Ordinal)']
  linear_reg [label = 'Linear Regression\\n(Continuous Predictor & Outcome)']
  logistic [label = 'Logistic Regression\\n(Continuous Predictor, Binary Outcome)']
  
  # Multiple variables
  manova [label = 'MANOVA\\n(Multiple Continuous Outcomes)']
  pca [label = 'Principal Component Analysis\\n(Dimension Reduction)']
  cluster [label = 'Cluster Analysis\\n(Grouping)']
  
  # Connections
  start -> {one_var two_var multi_var}
  
  one_var -> {one_sample two_sample multi_sample}
  
  one_sample -> {t_test wilcox binom}
  
  two_sample -> {ind_t paired_t mann wilcox_paired chi_sq mcnemar}
  
  multi_sample -> {anova rm_anova kruskal friedman chi_sq_multi}
  
  two_var -> {pearson spearman linear_reg logistic}
  
  multi_var -> {manova pca cluster}
}
")
```

**Decision Tree for Selecting Statistical Tests:**

1. **For One Variable:**
   - **One Sample:**
     - Normal, Continuous → One-Sample t-Test
     - Non-normal, Continuous → Wilcoxon Signed-Rank Test
     - Categorical → Binomial Test
   
   - **Two Samples:**
     - Normal, Continuous, Independent → Independent t-Test
     - Normal, Continuous, Related → Paired t-Test
     - Non-normal, Continuous, Independent → Mann-Whitney U Test
     - Non-normal, Continuous, Related → Wilcoxon Signed-Rank Test
     - Categorical, Independent → Chi-Square Test
     - Categorical, Related → McNemar Test
   
   - **Multiple Samples:**
     - Normal, Continuous, Independent → ANOVA
     - Normal, Continuous, Related → Repeated Measures ANOVA
     - Non-normal, Continuous, Independent → Kruskal-Wallis Test
     - Non-normal, Continuous, Related → Friedman Test
     - Categorical → Chi-Square Test

2. **For Two Variables:**
   - Normal, Continuous → Pearson Correlation
   - Non-normal or Ordinal → Spearman Correlation
   - Continuous Predictor & Outcome → Linear Regression
   - Continuous Predictor, Binary Outcome → Logistic Regression

3. **For Multiple Variables:**
   - Multiple Continuous Outcomes → MANOVA
   - Dimension Reduction → Principal Component Analysis
   - Grouping → Cluster Analysis

::: {.callout-tip}
## PROFESSIONAL TIP: Selecting and Reporting Statistical Tests

When selecting and reporting statistical tests in your research:

- **Verify assumptions**: Always check if your data meets the assumptions of the test (normality, homogeneity of variance, independence)
- **Report assumption tests**: Include results of normality tests or variance tests when presenting your findings
- **Consider transformations**: If data violates assumptions, consider appropriate transformations (log, square root, etc.) before switching to non-parametric tests
- **Effect sizes matter**: Always report effect sizes (Cohen's d, r, η²) alongside p-values
- **Use consistent formatting**: Present similar tests in the same format throughout your paper
- **Justify your choices**: Briefly explain why you selected a particular test, especially for complex analyses
- **Consult statisticians early**: For complex study designs, consult with a statistician during the planning phase, not after data collection
:::

## Parametric vs. Non-Parametric Tests

### Parametric Tests

Parametric tests make assumptions about the underlying population distribution, typically that the data follows a normal distribution. Common parametric tests include:

- t-tests
- ANOVA
- Pearson correlation
- Linear regression

### Non-Parametric Tests

Non-parametric tests make fewer assumptions about the population distribution and are useful when data doesn't meet the assumptions of parametric tests. Common non-parametric tests include:

- Mann-Whitney U test
- Wilcoxon signed-rank test
- Kruskal-Wallis test
- Spearman correlation

### Checking Assumptions

Before applying a parametric test, it's essential to check if your data meets the necessary assumptions. Let's use our crop yield dataset to demonstrate:

```{r}
# Load necessary libraries
library(tidyverse)

# Load the crop yield dataset
crop_yields <- read_csv("../data/agriculture/crop_yields.csv")

# View column names to see how R has formatted them
names(crop_yields)

# Extract wheat yields for analysis
wheat_yields <- crop_yields %>%
  filter(!is.na(`Wheat (tonnes per hectare)`)) %>%
  select(Entity, Year, `Wheat (tonnes per hectare)`)

# View the first few rows
knitr::kable(head(wheat_yields), 
             caption = "Sample of Wheat Yield Data",
             align = c("l", "c", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Check for normality
# Visual methods
par(mfrow = c(1, 2))
hist(wheat_yields$`Wheat (tonnes per hectare)`, main = "Histogram of Wheat Yields", xlab = "Yield (tonnes/hectare)")
qqnorm(wheat_yields$`Wheat (tonnes per hectare)`); qqline(wheat_yields$`Wheat (tonnes per hectare)`, col = "red")

# Statistical test for normality
shapiro_result <- shapiro.test(sample(wheat_yields$`Wheat (tonnes per hectare)`, min(5000, length(wheat_yields$`Wheat (tonnes per hectare)`))))

# Create a formatted table of the results
shapiro_table <- data.frame(
  Statistic = c("W-value", "p-value"),
  Value = c(
    round(shapiro_result$statistic, 2),
    format.pval(shapiro_result$p.value, digits = 3)
  )
)

# Display the formatted table
knitr::kable(shapiro_table, 
             caption = "Shapiro-Wilk Normality Test Results: Wheat Yields",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

## Tests for Comparing Groups

### t-Tests

#### Independent Samples t-Test

Used to compare means between two independent groups. Let's compare wheat yields between two time periods:

```{r}
# Create two groups: early period (before 2000) and recent period (2000 onwards)
crop_yields_grouped <- crop_yields %>%
  filter(!is.na(`Wheat (tonnes per hectare)`) & Year >= 1960) %>%
  mutate(period = ifelse(Year < 2000, "Early Period (pre-2000)", "Recent Period (2000+)"))

# Visualize the data
ggplot(crop_yields_grouped, aes(x = period, y = `Wheat (tonnes per hectare)`, fill = period)) +
  geom_boxplot() +
  labs(title = "Wheat Yields by Time Period",
       x = "Period",
       y = "Wheat Yield (tonnes/hectare)") +
  theme_minimal() +
  theme(legend.position = "none")

# Perform independent samples t-test using formula interface with backticks
t_test_result <- t.test(`Wheat (tonnes per hectare)` ~ period, data = crop_yields_grouped)

# Create a formatted table of the results
t_test_table <- data.frame(
  Statistic = c("t-value", "Degrees of Freedom", "p-value", "Mean Difference", "95% CI Lower", "95% CI Upper"),
  Value = c(
    round(t_test_result$statistic, 3),
    round(t_test_result$parameter, 1),
    format.pval(t_test_result$p.value, digits = 3),
    round(diff(t_test_result$estimate), 2),
    round(t_test_result$conf.int[1], 2),
    round(t_test_result$conf.int[2], 2)
  )
)

# Display the formatted table
knitr::kable(t_test_table, 
             caption = "Independent Samples t-Test Results: Wheat Yields by Time Period",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Summary statistics by period
period_summary <- crop_yields_grouped %>%
  group_by(period) %>%
  summarize(
    n = n(),
    Mean = round(mean(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    SD = round(sd(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    Min = round(min(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    Max = round(max(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2)
  )

# Display the summary statistics table
knitr::kable(period_summary, 
             caption = "Summary Statistics: Wheat Yields by Time Period",
             align = c("l", "c", "r", "r", "r", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

#### Paired Samples t-Test

Used to compare means between two related groups. Let's compare wheat and rice yields for the same countries and years:

```{r}
# Prepare data for paired t-test
paired_data <- crop_yields %>%
  filter(!is.na(`Wheat (tonnes per hectare)`) & !is.na(`Rice (tonnes per hectare)`)) %>%
  select(Entity, Year, `Wheat (tonnes per hectare)`, `Rice (tonnes per hectare)`)

# View the first few rows
knitr::kable(head(paired_data), 
             caption = "Sample of Paired Crop Yield Data",
             align = c("l", "c", "r", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Visualize the paired data
paired_data_long <- paired_data %>%
  pivot_longer(cols = c(`Wheat (tonnes per hectare)`, `Rice (tonnes per hectare)`), names_to = "Crop", values_to = "Yield")

ggplot(paired_data_long, aes(x = Crop, y = Yield, fill = Crop)) +
  geom_boxplot() +
  labs(title = "Comparison of Wheat and Rice Yields",
       x = "Crop Type",
       y = "Yield (tonnes/hectare)") +
  theme_minimal()

# Perform paired t-test using vectors directly
paired_t_test <- t.test(
  paired_data$`Wheat (tonnes per hectare)`, 
  paired_data$`Rice (tonnes per hectare)`, 
  paired = TRUE
)

# Create a formatted table of the results
paired_t_test_table <- data.frame(
  Statistic = c("t-value", "Degrees of Freedom", "p-value", "Mean Difference", "95% CI Lower", "95% CI Upper"),
  Value = c(
    round(paired_t_test$statistic, 3),
    round(paired_t_test$parameter, 1),
    format.pval(paired_t_test$p.value, digits = 3),
    round(mean(paired_data$`Wheat (tonnes per hectare)` - paired_data$`Rice (tonnes per hectare)`, na.rm = TRUE), 2),
    round(paired_t_test$conf.int[1], 2),
    round(paired_t_test$conf.int[2], 2)
  )
)

# Display the formatted table
knitr::kable(paired_t_test_table, 
             caption = "Paired Samples t-Test Results: Wheat vs. Rice Yields",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Create a summary statistics table
paired_summary <- paired_data %>%
  summarize(
    n = n(),
    `Mean Wheat` = round(mean(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    `SD Wheat` = round(sd(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    `Mean Rice` = round(mean(`Rice (tonnes per hectare)`, na.rm = TRUE), 2),
    `SD Rice` = round(sd(`Rice (tonnes per hectare)`, na.rm = TRUE), 2),
    `Mean Difference` = round(mean(`Wheat (tonnes per hectare)` - `Rice (tonnes per hectare)`, na.rm = TRUE), 2),
    `SD Difference` = round(sd(`Wheat (tonnes per hectare)` - `Rice (tonnes per hectare)`, na.rm = TRUE), 2)
  )

# Display the summary statistics table
knitr::kable(paired_summary, 
             caption = "Summary Statistics: Wheat vs. Rice Yields",
             align = rep("r", 7),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

### Analysis of Variance (ANOVA)

ANOVA is used to compare means among three or more independent groups. Let's compare crop yields across different continents:

```{r}
# Create a mapping of countries to continents (simplified for demonstration)
continent_mapping <- tibble(
  Entity = c("United States", "Canada", "Mexico", 
             "China", "India", "Japan", 
             "Germany", "France", "United Kingdom", 
             "Brazil", "Argentina", "Chile",
             "Egypt", "Nigeria", "South Africa",
             "Australia", "New Zealand"),
  Continent = c(rep("North America", 3), 
                rep("Asia", 3), 
                rep("Europe", 3), 
                rep("South America", 3),
                rep("Africa", 3),
                rep("Oceania", 2))
)

# Join with crop yields data
continental_yields <- crop_yields %>%
  inner_join(continent_mapping, by = "Entity") %>%
  filter(!is.na(`Wheat (tonnes per hectare)`) & Year >= 2000)

# Visualize wheat yields by continent
ggplot(continental_yields, aes(x = Continent, y = `Wheat (tonnes per hectare)`, fill = Continent)) +
  geom_boxplot() +
  labs(title = "Wheat Yields by Continent (2000-present)",
       x = "Continent",
       y = "Wheat Yield (tonnes/hectare)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Perform ANOVA
anova_result <- aov(`Wheat (tonnes per hectare)` ~ Continent, data = continental_yields)
anova_summary <- summary(anova_result)

# Create a formatted ANOVA table
anova_df <- data.frame(
  Source = c("Continent", "Residuals"),
  DF = c(anova_summary[[1]][["Df"]][1], anova_summary[[1]][["Df"]][2]),
  `Sum Sq` = c(round(anova_summary[[1]][["Sum Sq"]][1], 2), round(anova_summary[[1]][["Sum Sq"]][2], 2)),
  `Mean Sq` = c(round(anova_summary[[1]][["Mean Sq"]][1], 2), round(anova_summary[[1]][["Mean Sq"]][2], 2)),
  `F value` = c(round(anova_summary[[1]][["F value"]][1], 2), NA),
  `Pr(>F)` = c(format.pval(anova_summary[[1]][["Pr(>F)"]][1], digits = 3), NA)
)

# Display the ANOVA table
knitr::kable(anova_df, 
             caption = "ANOVA Results: Wheat Yields by Continent",
             align = c("l", "c", "r", "r", "r", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Post-hoc test to identify which groups differ
tukey_result <- TukeyHSD(anova_result)

# Convert Tukey HSD results to a data frame
tukey_df <- as.data.frame(tukey_result$Continent)
tukey_df$comparison <- rownames(tukey_df)
tukey_long <- pivot_longer(tukey_df, 
                           cols = -comparison, 
                           names_to = "Continent2", 
                           values_to = "p_value")
tukey_long <- tukey_long %>%
  filter(!is.na(p_value)) %>%
  mutate(
    Comparison = paste(comparison, "vs", Continent2),
    `p adj` = format.pval(p_value, digits = 3),
    Significant = ifelse(p_value < 0.05, "Yes", "No")
  ) %>%
  select(Comparison, `p adj`, Significant)

# Display the Tukey HSD results
knitr::kable(tukey_long, 
             caption = "Tukey HSD Post-hoc Test Results: Pairwise Comparisons of Continents",
             align = c("l", "c", "c"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Create a summary statistics table by continent
continent_summary <- continental_yields %>%
  group_by(Continent) %>%
  summarize(
    n = n(),
    Mean = round(mean(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    SD = round(sd(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    Min = round(min(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2),
    Max = round(max(`Wheat (tonnes per hectare)`, na.rm = TRUE), 2)
  )

# Display the summary statistics table
knitr::kable(continent_summary, 
             caption = "Summary Statistics: Wheat Yields by Continent",
             align = c("l", "c", "r", "r", "r", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

### Non-Parametric Alternatives

#### Mann-Whitney U Test

The Mann-Whitney U test (also called Wilcoxon rank-sum test) is a non-parametric alternative to the independent samples t-test:

```{r}
# Using the same time period groups as before
wilcox_test <- wilcox.test(`Wheat (tonnes per hectare)` ~ period, data = crop_yields_grouped)

# Create a formatted table of the results
wilcox_table <- data.frame(
  Statistic = c("W-value", "p-value"),
  Value = c(
    wilcox_test$statistic,
    format.pval(wilcox_test$p.value, digits = 3)
  )
)

# Display the formatted table
knitr::kable(wilcox_table, 
             caption = "Mann-Whitney U Test Results: Wheat Yields by Time Period",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

#### Kruskal-Wallis Test

The Kruskal-Wallis test is a non-parametric alternative to ANOVA:

```{r}
# Using the same continental data as before
kruskal_result <- kruskal.test(`Wheat (tonnes per hectare)` ~ Continent, data = continental_yields)

# Create a formatted table of the results
kruskal_table <- data.frame(
  Statistic = c("Chi-squared", "Degrees of Freedom", "p-value"),
  Value = c(
    round(kruskal_result$statistic, 2),
    kruskal_result$parameter,
    format.pval(kruskal_result$p.value, digits = 3)
  )
)

# Display the formatted table
knitr::kable(kruskal_table, 
             caption = "Kruskal-Wallis Test Results: Wheat Yields by Continent",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Post-hoc test for Kruskal-Wallis
if(requireNamespace("dunn.test", quietly = TRUE)) {
  library(dunn.test)
  dunn_result <- dunn.test(continental_yields$`Wheat (tonnes per hectare)`, continental_yields$Continent, method = "bonferroni", kw = TRUE)
  
  # Create a data frame from the dunn test results
  dunn_df <- data.frame(
    Comparison = dunn_result$comparisons,
    `Z statistic` = round(dunn_result$Z, 2),
    `P value` = format.pval(dunn_result$P, digits = 3),
    `Adjusted P` = format.pval(dunn_result$P.adjusted, digits = 3),
    Significant = ifelse(dunn_result$P.adjusted < 0.05, "Yes", "No")
  )
  
  # Display the formatted dunn test results
  knitr::kable(dunn_df, 
               caption = "Dunn's Post-hoc Test Results: Pairwise Comparisons of Continents",
               align = c("l", "r", "c", "c", "c"),
               format = "html") %>%
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                             full_width = FALSE,
                             position = "center")
} else {
  # Alternative: pairwise Wilcoxon tests
  pairwise_result <- pairwise.wilcox.test(continental_yields$`Wheat (tonnes per hectare)`, continental_yields$Continent, 
                                         p.adjust.method = "bonferroni")
  
  # Convert matrix to data frame
  pairwise_df <- as.data.frame(pairwise_result$p.value)
  pairwise_df$Continent1 <- rownames(pairwise_df)
  pairwise_long <- pivot_longer(pairwise_df, 
                               cols = -Continent1, 
                               names_to = "Continent2", 
                               values_to = "p_value")
  
  # Filter out NA values and format
  pairwise_long <- pairwise_long %>%
    filter(!is.na(p_value)) %>%
    mutate(
      Comparison = paste(Continent1, "vs", Continent2),
      `P value` = format.pval(p_value, digits = 3),
      Significant = ifelse(p_value < 0.05, "Yes", "No")
    ) %>%
    select(Comparison, `P value`, Significant)
  
  # Display the formatted pairwise Wilcoxon test results
  knitr::kable(pairwise_long, 
               caption = "Pairwise Wilcoxon Test Results with Bonferroni Correction",
               align = c("l", "c", "c"),
               format = "html") %>%
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                             full_width = FALSE,
                             position = "center")
}
```

## Tests for Relationships

### Correlation Analysis

#### Pearson Correlation

Pearson correlation measures the linear relationship between two continuous variables:

```{r}
# Examine correlation between wheat and maize yields
crop_correlation <- crop_yields %>%
  filter(!is.na(`Wheat (tonnes per hectare)`) & !is.na(`Maize (tonnes per hectare)`)) %>%
  select(Entity, Year, `Wheat (tonnes per hectare)`, `Maize (tonnes per hectare)`)

# Visualize the relationship
ggplot(crop_correlation, aes(x = `Wheat (tonnes per hectare)`, y = `Maize (tonnes per hectare)`)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(title = "Relationship Between Wheat and Maize Yields",
       x = "Wheat Yield (tonnes per hectare)",
       y = "Maize Yield (tonnes per hectare)") +
  theme_minimal()

# Calculate Pearson correlation
cor_result <- cor.test(crop_correlation$`Wheat (tonnes per hectare)`, crop_correlation$`Maize (tonnes per hectare)`, method = "pearson")

# Create a formatted table of the results
cor_table <- data.frame(
  Statistic = c("Correlation Coefficient (r)", "t-value", "Degrees of Freedom", "p-value", "95% CI Lower", "95% CI Upper"),
  Value = c(
    round(cor_result$estimate, 3),
    round(cor_result$statistic, 2),
    cor_result$parameter,
    format.pval(cor_result$p.value, digits = 3),
    round(cor_result$conf.int[1], 3),
    round(cor_result$conf.int[2], 3)
  )
)

# Display the formatted table
knitr::kable(cor_table, 
             caption = "Pearson Correlation Results: Wheat and Maize Yields",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

#### Spearman Correlation

Spearman correlation is a non-parametric measure of rank correlation:

```{r}
# Calculate Spearman correlation
spearman_result <- cor.test(crop_correlation$`Wheat (tonnes per hectare)`, crop_correlation$`Maize (tonnes per hectare)`, method = "spearman")

# Create a formatted table of the results
spearman_table <- data.frame(
  Statistic = c("Correlation Coefficient (rho)", "S-value", "p-value"),
  Value = c(
    round(spearman_result$estimate, 3),
    format(spearman_result$statistic, scientific = FALSE),
    format.pval(spearman_result$p.value, digits = 3)
  )
)

# Display the formatted table
knitr::kable(spearman_table, 
             caption = "Spearman Correlation Results: Wheat and Maize Yields",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Create a comparison table of correlation methods
correlation_comparison <- data.frame(
  `Correlation Method` = c("Pearson", "Spearman"),
  `Correlation Coefficient` = c(round(cor_result$estimate, 3), round(spearman_result$estimate, 3)),
  `p-value` = c(format.pval(cor_result$p.value, digits = 3), format.pval(spearman_result$p.value, digits = 3)),
  `Interpretation` = c(
    ifelse(abs(cor_result$estimate) > 0.7, "Strong", ifelse(abs(cor_result$estimate) > 0.3, "Moderate", "Weak")),
    ifelse(abs(spearman_result$estimate) > 0.7, "Strong", ifelse(abs(spearman_result$estimate) > 0.3, "Moderate", "Weak"))
  )
)

# Display the comparison table
knitr::kable(correlation_comparison, 
             caption = "Comparison of Correlation Methods",
             align = c("l", "c", "c", "c"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

### Regression Analysis

#### Linear Regression

Linear regression models the relationship between a dependent variable and one or more independent variables:

```{r}
# Create a dataset with year as predictor for wheat yields
time_series_data <- crop_yields %>%
  filter(Entity == "United States" & !is.na(`Wheat (tonnes per hectare)`)) %>%
  arrange(Year)

# Visualize the trend
ggplot(time_series_data, aes(x = Year, y = `Wheat (tonnes per hectare)`)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(title = "Wheat Yield Trends in the United States",
       x = "Year",
       y = "Wheat Yield (tonnes/hectare)") +
  theme_minimal()

# Perform linear regression
lm_model <- lm(`Wheat (tonnes per hectare)` ~ Year, data = time_series_data)
lm_summary <- summary(lm_model)

# Create a formatted table of the regression coefficients
coef_table <- data.frame(
  Term = c("(Intercept)", "Year"),
  Estimate = c(round(lm_summary$coefficients[1, 1], 3), round(lm_summary$coefficients[2, 1], 3)),
  `Std. Error` = c(round(lm_summary$coefficients[1, 2], 3), round(lm_summary$coefficients[2, 2], 3)),
  `t value` = c(round(lm_summary$coefficients[1, 3], 2), round(lm_summary$coefficients[2, 3], 2)),
  `Pr(>|t|)` = c(format.pval(lm_summary$coefficients[1, 4], digits = 3), format.pval(lm_summary$coefficients[2, 4], digits = 3))
)

# Display the coefficients table
knitr::kable(coef_table, 
             caption = "Linear Regression Coefficients: Wheat Yield by Year",
             align = c("l", "r", "r", "r", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Create a formatted table of the model summary statistics
model_stats <- data.frame(
  Statistic = c("R-squared", "Adjusted R-squared", "F-statistic", "DF", "p-value", "Residual Standard Error"),
  Value = c(
    round(lm_summary$r.squared, 3),
    round(lm_summary$adj.r.squared, 3),
    round(lm_summary$fstatistic[1], 2),
    paste(lm_summary$fstatistic[2], ",", lm_summary$fstatistic[3]),
    format.pval(pf(lm_summary$fstatistic[1], lm_summary$fstatistic[2], lm_summary$fstatistic[3], lower.tail = FALSE), digits = 3),
    round(lm_summary$sigma, 3)
  )
)

# Display the model summary statistics table
knitr::kable(model_stats, 
             caption = "Linear Regression Model Summary Statistics",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")

# Check assumptions
par(mfrow = c(2, 2))
plot(lm_model)
```

#### Multiple Regression

Multiple regression includes more than one predictor variable:

```{r}
# Create a dataset with multiple predictors
multi_crop_data <- crop_yields %>%
  filter(!is.na(`Wheat (tonnes per hectare)`) & !is.na(`Rice (tonnes per hectare)`) & !is.na(`Maize (tonnes per hectare)`)) %>%
  select(Entity, Year, `Wheat (tonnes per hectare)`, `Rice (tonnes per hectare)`, `Maize (tonnes per hectare)`)

# Perform multiple regression
multi_model <- lm(`Wheat (tonnes per hectare)` ~ `Rice (tonnes per hectare)` + `Maize (tonnes per hectare)` + Year, data = multi_crop_data)
multi_summary <- summary(multi_model)

# Create a formatted table of the regression coefficients
multi_coef_table <- data.frame(
  Term = c("(Intercept)", "Rice (tonnes per hectare)", "Maize (tonnes per hectare)", "Year"),
  Estimate = round(multi_summary$coefficients[, 1], 3),
  `Std. Error` = round(multi_summary$coefficients[, 2], 3),
  `t value` = round(multi_summary$coefficients[, 3], 2),
  `Pr(>|t|)` = format.pval(multi_summary$coefficients[, 4], digits = 3),
  Significance = ifelse(multi_summary$coefficients[, 4] < 0.001, "***", 
                       ifelse(multi_summary$coefficients[, 4] < 0.01, "**", 
                              ifelse(multi_summary$coefficients[, 4] < 0.05, "*", 
                                     ifelse(multi_summary$coefficients[, 4] < 0.1, ".", ""))))
)

# Display the coefficients table
knitr::kable(multi_coef_table, 
             caption = "Multiple Regression Coefficients: Predicting Wheat Yield",
             align = c("l", "r", "r", "r", "r", "c"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center") %>%
  kableExtra::add_footnote("Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1", notation = "none")

# Create a formatted table of the model summary statistics
multi_model_stats <- data.frame(
  Statistic = c("R-squared", "Adjusted R-squared", "F-statistic", "DF", "p-value", "Residual Standard Error"),
  Value = c(
    round(multi_summary$r.squared, 3),
    round(multi_summary$adj.r.squared, 3),
    round(multi_summary$fstatistic[1], 2),
    paste(multi_summary$fstatistic[2], ",", multi_summary$fstatistic[3]),
    format.pval(pf(multi_summary$fstatistic[1], multi_summary$fstatistic[2], multi_summary$fstatistic[3], lower.tail = FALSE), digits = 3),
    round(multi_summary$sigma, 3)
  )
)

# Display the model summary statistics table
knitr::kable(multi_model_stats, 
             caption = "Multiple Regression Model Summary Statistics",
             align = c("l", "r"),
             format = "html") %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                           full_width = FALSE,
                           position = "center")
```

## Tests for Categorical Data

### Chi-Square Test

The Chi-Square test examines the association between categorical variables. Let's use our biodiversity dataset:

```{r}
# Load the biodiversity dataset
plants <- read_csv("../data/ecology/biodiversity.csv")

# Create a contingency table of red list categories by plant group
if("red_list_category" %in% colnames(plants) & "group" %in% colnames(plants)) {
  # Create a contingency table
  contingency_table <- table(plants$red_list_category, plants$group)
  
  # View the table
  knitr::kable(contingency_table, 
               caption = "Contingency Table: Red List Categories by Plant Group",
               align = rep("r", ncol(contingency_table) + 1),
               format = "html") %>%
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                             full_width = FALSE,
                             position = "center")
  
  # Perform Chi-Square test
  chi_sq_result <- chisq.test(contingency_table)
  chi_sq_table <- data.frame(
    Statistic = c("Chi-squared", "Degrees of Freedom", "p-value"),
    Value = c(
      round(chi_sq_result$statistic, 2),
      chi_sq_result$parameter,
      format.pval(chi_sq_result$p.value, digits = 3)
    )
  )
  
  # Display the Chi-Square test results
  knitr::kable(chi_sq_table, 
               caption = "Chi-Square Test Results: Association Between Red List Categories and Plant Groups",
               align = c("l", "r"),
               format = "html") %>%
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                             full_width = FALSE,
                             position = "center")
  
  # Examine residuals to understand the pattern of association
  chi_sq_residuals <- chi_sq_result$residuals
  
  # Create a data frame with the residuals in a more suitable format for display
  residuals_matrix <- as.matrix(chi_sq_residuals)
  residuals_df <- as.data.frame.table(residuals_matrix)
  colnames(residuals_df) <- c("Category", "Group", "Residual")
  residuals_df$Residual <- round(residuals_df$Residual, 2)
  
  # Display the residuals table
  knitr::kable(residuals_df,
               caption = "Standardized Residuals: Association Between Red List Categories and Plant Groups",
               align = c("l", "l", "r"),
               format = "html") %>%
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"),
                             full_width = FALSE,
                             position = "center")
} else {
  # If the expected columns don't exist, create a demonstration with available data
  message("Required columns not found. Creating a demonstration with available columns.")
  
  # Identify categorical columns
  categorical_cols <- sapply(plants, function(x) is.character(x) || is.factor(x))
  cat_col_names <- names(plants)[categorical_cols]
  
  if(length(cat_col_names) >= 2) {
    # Select the first two categorical columns
    col1 <- cat_col_names[1]
    col2 <- cat_col_names[2]
    
    # Create a contingency table
    contingency_table <- table(plants[[col1]], plants[[col2]])
    
    # View the table
    knitr::kable(contingency_table, 
                 caption = paste("Contingency Table:", col1, "by", col2),
                 align = rep("r", ncol(contingency_table) + 1),
                 format = "html") %>%
      kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                               full_width = FALSE,
                               position = "center")
    
    # Perform Chi-Square test if appropriate
    if(min(dim(contingency_table)) > 1 && sum(contingency_table) > 0) {
      chi_sq_result <- chisq.test(contingency_table, simulate.p.value = TRUE)
      chi_sq_table <- data.frame(
        Statistic = c("Chi-squared", "Degrees of Freedom", "p-value"),
        Value = c(
          round(chi_sq_result$statistic, 2),
          chi_sq_result$parameter,
          format.pval(chi_sq_result$p.value, digits = 3)
        )
      )
      
      # Display the Chi-Square test results
      knitr::kable(chi_sq_table, 
                   caption = paste("Chi-Square Test Results: Association Between", col1, "and", col2),
                   align = c("l", "r"),
                   format = "html") %>%
        kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                                 full_width = FALSE,
                                 position = "center")
    } else {
      message("Contingency table not suitable for Chi-Square test.")
    }
  } else {
    message("Not enough categorical columns found for Chi-Square test demonstration.")
  }
}
```

## Tests for Trends and Time Series

### Time Series Analysis

Time series analysis examines data collected over time to identify patterns, trends, and seasonal effects:

```{r}
# Create a time series of wheat yields for a specific country
us_wheat <- crop_yields %>%
  filter(Entity == "United States" & !is.na(`Wheat (tonnes per hectare)`)) %>%
  arrange(Year)

# Convert to time series object
if(requireNamespace("zoo", quietly = TRUE)) {
  library(zoo)
  wheat_ts <- zoo(us_wheat$`Wheat (tonnes per hectare)`, us_wheat$Year)
  
  # Plot the time series
  plot(wheat_ts, main = "US Wheat Yields Over Time",
       xlab = "Year", ylab = "Wheat Yield (tonnes/hectare)")
  
  # Add trend line
  lines(lowess(us_wheat$Year, us_wheat$`Wheat (tonnes per hectare)`), col = "red", lwd = 2)
} else {
  # Basic plot if zoo package is not available
  plot(us_wheat$Year, us_wheat$`Wheat (tonnes per hectare)`, type = "l",
       main = "US Wheat Yields Over Time",
       xlab = "Year", ylab = "Wheat Yield (tonnes per hectare)")
  
  # Add trend line
  lines(lowess(us_wheat$Year, us_wheat$`Wheat (tonnes per hectare)`), col = "red", lwd = 2)
}
```

### Mann-Kendall Trend Test

The Mann-Kendall test is a non-parametric test for identifying trends in time series data:

```{r}
# Perform Mann-Kendall trend test
if(requireNamespace("Kendall", quietly = TRUE)) {
  library(Kendall)
  mk_test <- Kendall::MannKendall(us_wheat$`Wheat (tonnes per hectare)`)
  mk_table <- data.frame(
    Statistic = c("Tau", "p-value"),
    Value = c(
      round(mk_test$tau, 3),
      format.pval(mk_test$p.value, digits = 3)
    )
  )
  
  # Display the Mann-Kendall test results
  knitr::kable(mk_table, 
               caption = "Mann-Kendall Trend Test Results: US Wheat Yields",
               align = c("l", "r"),
               format = "html") %>%
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), 
                             full_width = FALSE,
                             position = "center")
} else {
  message("The Kendall package is not installed. Install it with install.packages('Kendall') to run the Mann-Kendall trend test.")
}
```

## Summary

This chapter has demonstrated a variety of statistical tests using real agricultural and biodiversity datasets. We've covered:

1. **Tests for comparing groups**:
   - t-tests for comparing two groups
   - ANOVA for comparing multiple groups
   - Non-parametric alternatives when data doesn't meet parametric assumptions

2. **Tests for relationships**:
   - Correlation analysis to measure the strength of relationships
   - Regression analysis to model relationships between variables

3. **Tests for categorical data**:
   - Chi-Square test for examining associations between categorical variables

4. **Tests for time series data**:
   - Time series analysis for identifying patterns over time
   - Mann-Kendall test for detecting trends

When conducting statistical tests, remember to:
- Clearly define your research question
- Check if your data meets the assumptions of the test
- Choose the appropriate test based on your data type and research question
- Interpret results in the context of your research question
- Consider the practical significance, not just statistical significance

## Exercises

1. Using the crop yield dataset, compare maize yields between continents using both ANOVA and the Kruskal-Wallis test. Which is more appropriate and why?

2. Examine the relationship between potato and rice yields using correlation analysis. Calculate both Pearson and Spearman correlations and explain which is more appropriate.

3. Using the biodiversity dataset, investigate whether there's an association between conservation status and another categorical variable of your choice.

4. Perform a time series analysis of wheat yields for China and compare the trend with that of the United States.

5. Using the animal dataset (`../data/entomology/insects.csv`), compare two groups using an appropriate statistical test.

6. Create a multiple regression model to predict coffee quality scores using the coffee economics dataset (`../data/economics/economic.csv`).

## Enhanced Statistical Tests Chapter

The enhanced visualizations and tables for this chapter are available in a separate file to ensure compatibility with the book rendering process.
